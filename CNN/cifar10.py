# -*- coding: utf-8 -*-
"""cifar10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_CDcF0WWNt3wnNwYnPfCitm4PnEQ6zx
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models, optimizers

IMG_CHANNELS = 3
IMG_ROWS = 32
IMG_COLS = 32

BATCH_SIZE = 128
EPOCHS = 20
CLASSES = 10
VERBOSE = 1
VALIDATION_SPLIT = 0.2
OPTIM = tf.keras.optimizers.RMSprop()

def build(input_shape, classes):
  model = models.Sequential()
  
  model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape = input_shape))
  model.add(layers.MaxPool2D(pool_size=(2,2)))
  model.add(layers.Dropout(0.25))

  #dense network
  model.add(layers.Flatten())
  model.add(layers.Dense(512, activation='relu'))
  model.add(layers.Dropout(0.5))
  model.add(layers.Dense(classes, activation='softmax'))
  return model

(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

X_train, X_test = X_train / 255.0, X_test / 255.0
y_train = tf.keras.utils.to_categorical(y_train, CLASSES)
y_test = tf.keras.utils.to_categorical(y_test, CLASSES)

model = build((IMG_ROWS, IMG_COLS, IMG_CHANNELS), CLASSES)

callbacks = [tf.keras.callbacks.TensorBoard(log_dir='./logs')]

#train
model.compile(loss = 'categorical_crossentropy', optimizer = OPTIM, metrics = ['accuracy'])

model.fit(X_train, y_train, batch_size = BATCH_SIZE, epochs = EPOCHS, validation_split = VALIDATION_SPLIT,
          verbose = VERBOSE, callbacks = callbacks)

score = model.evaluate(X_test, y_test, batch_size = BATCH_SIZE, verbose = VERBOSE)

print("\nTest score: ", score[0])
print("\nTest accuracy: ", score[1])

